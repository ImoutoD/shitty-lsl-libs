#ifndef XTEA_LSL_H
#define XTEA_LSL_H

//************************************************// 
//* Masa's XTEA encryption/decryption v4         *// 
//* Modified by SleightOf Hand for Stability and *// 
//* intercommunication with PHP version          *//
//* Someone Else made backwards-incompatible     *//
//* changes to make each message unique and      *// 
//* and validate messages                        *//
//************************************************// 
// NOTE: This version only encodes 60 bits per 64-bit block! 
// This code is public domain. 
// Sleight was here 20070522 
// masa was here 20070315 
// so was strife 20070315 
// so was adz 20070812
//
// This was Modified by SleightOf Hand to allow
// Strong encryption between LSL and PHP. 
//************************************************// 
//* XTEA IMPLEMENTATION                          *// 
//************************************************// 

#include <hacks.lsli>
#include <integers.lsli>
#include <strings.lsli>

// (sqrt(5) - 1) * 2^31 
#define XTEA_DELTA 0x9E3779B9

#ifndef XTEA_NUM_ROUNDS
#   define XTEA_NUM_ROUNDS 32
#endif

// space / time allowing, you should use Strife's SHA-2 + HMAC
// (http://wiki.secondlife.com/wiki/SHA-2#SHA-224) implementation
#ifndef XTEA_MAC_FUNC
#   define XTEA_MAC_FUNC llSHA1String
#endif


integer gXTEActx1 = 0;
integer gXTEActx2 = 0;

integer gXTEADecodeFail;
 
// Encipher two integers and return the result as a 12-byte string 
// containing two base64-encoded integers. 
string xtea_encipher( integer v0, integer v1 )
{
    integer num_rounds = XTEA_NUM_ROUNDS; 
    integer sum = 0; 
    do { 
        // LSL does not have unsigned integers, so when shifting right we 
        // have to mask out sign-extension bits. 
        v0  += (((v1 << 4) ^ ((v1 >> 5) & 0x07FFFFFF)) + v1) ^ (sum + llList2Integer(XTEA_KEY, sum & 3));
        sum +=  XTEA_DELTA;
        v1  += (((v0 << 4) ^ ((v0 >> 5) & 0x07FFFFFF)) + v0) ^ (sum + llList2Integer(XTEA_KEY, (sum >> 11) & 3)); 
 
    } while( --num_rounds ); 
    
    gXTEActx1 = v0;
    gXTEActx2 = v1;
    
    //return only first 6 chars to remove "=="'s and compact encrypted text.
    return llGetSubString(llIntegerToBase64(v0),0,5) +
           llGetSubString(llIntegerToBase64(v1),0,5); 
}
 
// Decipher two base64-encoded integers and return the FIRST 30 BITS of 
// each as one 10-byte base64-encoded string. 
string xtea_decipher( integer v0, integer v1)
{ 
    integer num_rounds = XTEA_NUM_ROUNDS; 
    integer sum = XTEA_DELTA * XTEA_NUM_ROUNDS; 
    do { 
        // LSL does not have unsigned integers, so when shifting right we 
        // have to mask out sign-extension bits. 
        v1  -= (((v0 << 4) ^ ((v0 >> 5) & 0x07FFFFFF)) + v0) ^ (sum + llList2Integer(XTEA_KEY, (sum>>11) & 3)); 
        sum -= XTEA_DELTA;
        v0  -= (((v1 << 4) ^ ((v1 >> 5) & 0x07FFFFFF)) + v1) ^ (sum + llList2Integer(XTEA_KEY, sum  & 3)); 
    } while ( --num_rounds ); 
 
    return llGetSubString(llIntegerToBase64(v0 ^ gXTEActx1), 0, 4) + 
           llGetSubString(llIntegerToBase64(v1 ^ gXTEActx2), 0, 4); 
}
 
// Encrypt a full string using XTEA. 
// and jacked up CBC mode block chaining
string xtea_encrypt_string( string str )
{
    gXTEActx1 = RAND_32BIT();
    gXTEActx2 = RAND_32BIT();
    
    string iv = (string)gXTEActx1 + "," + (string)gXTEActx2;
    
    // encode string 
    str = llStringToBase64(str); 
    // remove trailing =s so we can do our own 0 padding 
    integer i = llSubStringIndex( str, "=" ); 
    if (~i) 
        str = llDeleteSubString( str, i, -1 ); 
 
    // we don't want to process padding, so get length before adding it 
    integer len = llStringLength(str); 
 
    // zero pad 
    str += "AAAAAAAAAA="; 
 
    string result; 
    i = 0;
 
    do { 
        // encipher 30 (5*6) bits at a time. 
        result += xtea_encipher(
            llBase64ToInteger(llGetSubString(str,   i, i += 4) + "A=") ^ gXTEActx1,
            llBase64ToInteger(llGetSubString(str, ++i, i += 4) + "A=") ^ gXTEActx2
        ); 
    } while ( ++i < len ); 
 
    str = "";
 
     // Per Moxie (except actual MAC is probably too expensive)
    string hash = XTEA_MAC_FUNC(iv + result + HASH_SECRET);
    
    return (string)iv + ":" + hash + ":" + result; 
} 
 
// Decrypt a full string using XTEA 
string xtea_decrypt_string( string str ) 
{
    gXTEADecodeFail = FALSE;
    
    //separate the ciphertext and the IV
    list parsed = llParseStringKeepNulls(str, [":"], []);
    string iv = llList2String(parsed, 0);
    str = llList2String(parsed, 2);

#ifdef NO_VERIF_XTEA_DECODING
    parsed = [];
#else
    if(XTEA_MAC_FUNC(iv + str + HASH_SECRET) != llList2String(parsed, 1))
    {
        gXTEADecodeFail = TRUE;
        return "";
    }
    
    parsed = [];
#endif
    
    integer len = llStringLength(str); 
    integer i; 
    string result;
    
    list split_iv = llParseStringKeepNulls(iv, [","], []);
    
    gXTEActx1 = llList2Integer(split_iv, 0);
    gXTEActx2 = llList2Integer(split_iv, 1);
    
    do { 
        integer enc1 = llBase64ToInteger(llGetSubString(str,   i, i += 5) + "==");
        integer enc2 = llBase64ToInteger(llGetSubString(str, ++i, i += 5) + "==");
        result += xtea_decipher( 
            enc1, 
            enc2
        );
        gXTEActx1 = enc1; 
        gXTEActx2 = enc2;
    } while ( ++i < len ); 
 
    // Replace multiple trailing zeroes with a single one 
    len = llStringLength(result);
    i = len - 1;
    
    integer trailing_nulls = FALSE;
    
    //this version works better with Phlox (and probably OpenSim,) remove all trailing nulls
    //(maybe due to order of parameter expression evaluation?)
    while( llGetSubString( result, i, i ) == "A" )
    {
        --i;
        trailing_nulls = TRUE;
    }
    
    //if less than two trailing A's, this should be a NO-OP
    if(trailing_nulls)
        result = llDeleteSubString(result, i+2, len);
    
    //properly pad the string
    i = llStringLength(result) % 4;
    if (i == 1) result += "A==";
    else if (i == 2) result += "==";
    else if (i == 3) result += "=";
    
    return llBase64ToString( result );
}

#endif
